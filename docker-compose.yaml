version: "3.8"

x-build: &dockerfile-dev-build
  context: .
  dockerfile: Dockerfile.dev

x-prd-build: &dockerfile-prd-build
  context: .
  dockerfile: Dockerfile

services:
  db:
    image: postgres:16-alpine
    user: postgres
    environment:
      POSTGRES_USER: boss_role
      POSTGRES_PASSWORD: boss_password
    ports:
      - "5432:5432"
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "--dbname=postgres",
          "--username=boss_role"
        ]
      interval: 2s
      timeout: 1m
      retries: 5
      start_period: 10s
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5     
  app-development:
    build: *dockerfile-dev-build
    volumes:
      - .:/app
    env_file:
      - .env.development
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command:
      [
          "./scripts/start-web-development.sh"
      ]
  app-consumer:
    build: *dockerfile-dev-build
    volumes:
      - .:/app
    env_file:
      - .env.development
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command:
      [
        "./scripts/start-consumer-development.sh"
      ]    
  app:
    build: *dockerfile-prd-build
    env_file:
      - .env.development
    ports:
      - "8000:8000"
    depends_on:
      apply-migrations:
        condition: service_completed_successfully
    # In case you want to run the consumer instead of the web app, just uncomment the lines below:
    #  rabbitmq:
    #    condition: service_healthy
    #command: ["./scripts/start-consumer.sh"]
  tests:
    build: *dockerfile-dev-build
    volumes:
      - .:/app
    env_file:
      - .env.development
    depends_on:
      db:
        condition: service_healthy
    command:
      [
          "./scripts/start-tests.sh"
      ]
  lint:
    build: *dockerfile-dev-build
    volumes:
      - .:/app
    command:
      [
          "./scripts/start-lint.sh"
      ]
  formatter:
    build: *dockerfile-dev-build
    volumes:
      - .:/app
    command:
      [
          "./scripts/start-formatter.sh",
      ]
  generate-migrations:
    build: *dockerfile-dev-build
    volumes:
      - .:/app
    env_file:
      - .env.development
    command:
      [
          "./scripts/generate-migrations.sh",
      ]
  apply-migrations:
    build: *dockerfile-dev-build
    volumes:
      - .:/app
    env_file:
      - .env.development
    depends_on:
      db:
        condition: service_healthy
    command:
      [
          "./scripts/apply-migrations.sh",
      ]
  sonarcloud:
    build: *dockerfile-dev-build
    volumes:
      - .:/app
    env_file:
      - .env.development
    depends_on:
      db:
        condition: service_healthy
    command:
      [
          "./scripts/start-sonarcloud.sh",
          "YOUR-SONAR-CLOUD-TOKEN",
          "YOUR-PROJECT-VERSION"
      ]
  performance-test:
    image: willianantunes/containerized-jmeter
    working_dir: /app
    volumes:
      - .:/app
    env_file:
      - .env.development
    depends_on:
      db:
        condition: service_healthy
      app:
        condition: service_healthy
    command:
      [
          "./scripts/start-performance-testing.sh"
      ]
