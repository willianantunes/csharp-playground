// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TicTacToeCSharpPlayground.Infrastructure.Database;

#nullable disable

namespace TicTacToeCSharpPlayground.Infrastructure.Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231025230042_0")]
    partial class _0
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TicTacToeCSharpPlayground.Core.Models.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NumberOfColumn")
                        .HasMaxLength(1)
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfRows")
                        .HasMaxLength(1)
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("TicTacToeCSharpPlayground.Core.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConfiguredBoardId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Draw")
                        .HasColumnType("boolean");

                    b.Property<bool>("Finished")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("WinnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConfiguredBoardId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("TicTacToeCSharpPlayground.Core.Models.Movement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BoardId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WhoMadeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WhoMadeId");

                    b.HasIndex("BoardId", "Position")
                        .IsUnique();

                    b.ToTable("Movements");
                });

            modelBuilder.Entity("TicTacToeCSharpPlayground.Core.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Computer")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("TicTacToeCSharpPlayground.Core.Models.PlayerBoard", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("BoardId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PlayerId", "BoardId");

                    b.HasIndex("BoardId", "PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerBoards");
                });

            modelBuilder.Entity("TicTacToeCSharpPlayground.Core.Models.Game", b =>
                {
                    b.HasOne("TicTacToeCSharpPlayground.Core.Models.Board", "ConfiguredBoard")
                        .WithMany()
                        .HasForeignKey("ConfiguredBoardId");

                    b.HasOne("TicTacToeCSharpPlayground.Core.Models.Player", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId");

                    b.Navigation("ConfiguredBoard");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("TicTacToeCSharpPlayground.Core.Models.Movement", b =>
                {
                    b.HasOne("TicTacToeCSharpPlayground.Core.Models.Board", "Board")
                        .WithMany("Movements")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicTacToeCSharpPlayground.Core.Models.Player", "WhoMade")
                        .WithMany()
                        .HasForeignKey("WhoMadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("WhoMade");
                });

            modelBuilder.Entity("TicTacToeCSharpPlayground.Core.Models.PlayerBoard", b =>
                {
                    b.HasOne("TicTacToeCSharpPlayground.Core.Models.Board", "Board")
                        .WithMany("PlayerBoards")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicTacToeCSharpPlayground.Core.Models.Player", "Player")
                        .WithMany("PlayerBoards")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TicTacToeCSharpPlayground.Core.Models.Board", b =>
                {
                    b.Navigation("Movements");

                    b.Navigation("PlayerBoards");
                });

            modelBuilder.Entity("TicTacToeCSharpPlayground.Core.Models.Player", b =>
                {
                    b.Navigation("PlayerBoards");
                });
#pragma warning restore 612, 618
        }
    }
}
