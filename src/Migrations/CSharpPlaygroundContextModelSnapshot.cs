// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TicTacToeCSharpPlayground.Repository;

namespace TicTacToeCSharpPlayground.Migrations
{
    [DbContext(typeof(CSharpPlaygroundContext))]
    partial class CSharpPlaygroundContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("TicTacToeCSharpPlayground.Repository.Board", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("NumberOfColumn")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfRows")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("TicTacToeCSharpPlayground.Repository.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConfiguredBoardId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Draw")
                        .HasColumnType("boolean");

                    b.Property<bool>("Finished")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConfiguredBoardId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("TicTacToeCSharpPlayground.Repository.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("TicTacToeCSharpPlayground.Repository.Movement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BoardId")
                        .HasColumnType("uuid");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<Guid?>("WhoMadeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("WhoMadeId");

                    b.ToTable("Movements");
                });

            modelBuilder.Entity("TicTacToeCSharpPlayground.Repository.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Computer")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("TicTacToeCSharpPlayground.Repository.PlayerBoard", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BoardId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("PlayerId", "BoardId");

                    b.HasIndex("BoardId");

                    b.ToTable("PlayerBoard");
                });

            modelBuilder.Entity("TicTacToeCSharpPlayground.Repository.TodoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TodoItems");
                });

            modelBuilder.Entity("TicTacToeCSharpPlayground.Repository.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TicTacToeCSharpPlayground.Repository.Game", b =>
                {
                    b.HasOne("TicTacToeCSharpPlayground.Repository.Board", "ConfiguredBoard")
                        .WithMany()
                        .HasForeignKey("ConfiguredBoardId");

                    b.HasOne("TicTacToeCSharpPlayground.Repository.Player", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId");

                    b.Navigation("ConfiguredBoard");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("TicTacToeCSharpPlayground.Repository.Movement", b =>
                {
                    b.HasOne("TicTacToeCSharpPlayground.Repository.Board", "Board")
                        .WithMany("Movements")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicTacToeCSharpPlayground.Repository.Player", "WhoMade")
                        .WithMany()
                        .HasForeignKey("WhoMadeId");

                    b.Navigation("Board");

                    b.Navigation("WhoMade");
                });

            modelBuilder.Entity("TicTacToeCSharpPlayground.Repository.PlayerBoard", b =>
                {
                    b.HasOne("TicTacToeCSharpPlayground.Repository.Board", "Board")
                        .WithMany("PlayerBoards")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicTacToeCSharpPlayground.Repository.Player", "Player")
                        .WithMany("PlayerBoards")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TicTacToeCSharpPlayground.Repository.User", b =>
                {
                    b.HasOne("TicTacToeCSharpPlayground.Repository.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("TicTacToeCSharpPlayground.Repository.Board", b =>
                {
                    b.Navigation("Movements");

                    b.Navigation("PlayerBoards");
                });

            modelBuilder.Entity("TicTacToeCSharpPlayground.Repository.Player", b =>
                {
                    b.Navigation("PlayerBoards");
                });
#pragma warning restore 612, 618
        }
    }
}
